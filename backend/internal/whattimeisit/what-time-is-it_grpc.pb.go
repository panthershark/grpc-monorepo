// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: what-time-is-it.proto

package whattimeisit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WhatTimeIsItServiceClient is the client API for WhatTimeIsItService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhatTimeIsItServiceClient interface {
	WhatTimeIsItRightNow(ctx context.Context, in *WhatTimeIsItRightNowRequest, opts ...grpc.CallOption) (*WhatTimeIsItRightNowResponse, error)
	WhatTimeIsItRightNowStream(ctx context.Context, in *WhatTimeIsItRightNowStreamRequest, opts ...grpc.CallOption) (WhatTimeIsItService_WhatTimeIsItRightNowStreamClient, error)
}

type whatTimeIsItServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhatTimeIsItServiceClient(cc grpc.ClientConnInterface) WhatTimeIsItServiceClient {
	return &whatTimeIsItServiceClient{cc}
}

func (c *whatTimeIsItServiceClient) WhatTimeIsItRightNow(ctx context.Context, in *WhatTimeIsItRightNowRequest, opts ...grpc.CallOption) (*WhatTimeIsItRightNowResponse, error) {
	out := new(WhatTimeIsItRightNowResponse)
	err := c.cc.Invoke(ctx, "/whattimeisit.WhatTimeIsItService/WhatTimeIsItRightNow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatTimeIsItServiceClient) WhatTimeIsItRightNowStream(ctx context.Context, in *WhatTimeIsItRightNowStreamRequest, opts ...grpc.CallOption) (WhatTimeIsItService_WhatTimeIsItRightNowStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &WhatTimeIsItService_ServiceDesc.Streams[0], "/whattimeisit.WhatTimeIsItService/WhatTimeIsItRightNowStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &whatTimeIsItServiceWhatTimeIsItRightNowStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WhatTimeIsItService_WhatTimeIsItRightNowStreamClient interface {
	Recv() (*WhatTimeIsItRightNowStreamResponse, error)
	grpc.ClientStream
}

type whatTimeIsItServiceWhatTimeIsItRightNowStreamClient struct {
	grpc.ClientStream
}

func (x *whatTimeIsItServiceWhatTimeIsItRightNowStreamClient) Recv() (*WhatTimeIsItRightNowStreamResponse, error) {
	m := new(WhatTimeIsItRightNowStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WhatTimeIsItServiceServer is the server API for WhatTimeIsItService service.
// All implementations must embed UnimplementedWhatTimeIsItServiceServer
// for forward compatibility
type WhatTimeIsItServiceServer interface {
	WhatTimeIsItRightNow(context.Context, *WhatTimeIsItRightNowRequest) (*WhatTimeIsItRightNowResponse, error)
	WhatTimeIsItRightNowStream(*WhatTimeIsItRightNowStreamRequest, WhatTimeIsItService_WhatTimeIsItRightNowStreamServer) error
	mustEmbedUnimplementedWhatTimeIsItServiceServer()
}

// UnimplementedWhatTimeIsItServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWhatTimeIsItServiceServer struct {
}

func (UnimplementedWhatTimeIsItServiceServer) WhatTimeIsItRightNow(context.Context, *WhatTimeIsItRightNowRequest) (*WhatTimeIsItRightNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhatTimeIsItRightNow not implemented")
}
func (UnimplementedWhatTimeIsItServiceServer) WhatTimeIsItRightNowStream(*WhatTimeIsItRightNowStreamRequest, WhatTimeIsItService_WhatTimeIsItRightNowStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WhatTimeIsItRightNowStream not implemented")
}
func (UnimplementedWhatTimeIsItServiceServer) mustEmbedUnimplementedWhatTimeIsItServiceServer() {}

// UnsafeWhatTimeIsItServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhatTimeIsItServiceServer will
// result in compilation errors.
type UnsafeWhatTimeIsItServiceServer interface {
	mustEmbedUnimplementedWhatTimeIsItServiceServer()
}

func RegisterWhatTimeIsItServiceServer(s grpc.ServiceRegistrar, srv WhatTimeIsItServiceServer) {
	s.RegisterService(&WhatTimeIsItService_ServiceDesc, srv)
}

func _WhatTimeIsItService_WhatTimeIsItRightNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhatTimeIsItRightNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatTimeIsItServiceServer).WhatTimeIsItRightNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whattimeisit.WhatTimeIsItService/WhatTimeIsItRightNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatTimeIsItServiceServer).WhatTimeIsItRightNow(ctx, req.(*WhatTimeIsItRightNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatTimeIsItService_WhatTimeIsItRightNowStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WhatTimeIsItRightNowStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WhatTimeIsItServiceServer).WhatTimeIsItRightNowStream(m, &whatTimeIsItServiceWhatTimeIsItRightNowStreamServer{stream})
}

type WhatTimeIsItService_WhatTimeIsItRightNowStreamServer interface {
	Send(*WhatTimeIsItRightNowStreamResponse) error
	grpc.ServerStream
}

type whatTimeIsItServiceWhatTimeIsItRightNowStreamServer struct {
	grpc.ServerStream
}

func (x *whatTimeIsItServiceWhatTimeIsItRightNowStreamServer) Send(m *WhatTimeIsItRightNowStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WhatTimeIsItService_ServiceDesc is the grpc.ServiceDesc for WhatTimeIsItService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhatTimeIsItService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whattimeisit.WhatTimeIsItService",
	HandlerType: (*WhatTimeIsItServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhatTimeIsItRightNow",
			Handler:    _WhatTimeIsItService_WhatTimeIsItRightNow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WhatTimeIsItRightNowStream",
			Handler:       _WhatTimeIsItService_WhatTimeIsItRightNowStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "what-time-is-it.proto",
}
